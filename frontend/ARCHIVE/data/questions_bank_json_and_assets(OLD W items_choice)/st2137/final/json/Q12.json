{
  "question_id": null,
  "course": "ST2137",
  "semester": 2510,
  "assessment_type": "midterm",
  "question_no": 12,
  "is_multi": false,
  "question_stem": "It can be shown that if we add random numbers until their sum exceeds 1, then the expected number of random numbers added is equal to ee. That is, if N=min{n:∑i=1nUi>1} N = \\min \\left\\{ n: \\sum_{i=1}^n U_i > 1 \\right\\}  then E(N)=eE(N) = e. (We do not need to prove the result for this question.)\nSuppose that a Monte Carlo simulation was run to estimate ee, just like in the tutorial. From 1000 observations of NiN_i, the variance NN was estimated to be 0.76.\nKnowing that the formula for the 95% Confidence Interval is approximately N‾±1.96sn \\bar{N} \\pm 1.96 \\frac{s}{\\sqrt{n}}  estimate the number of simulations needed to obtain an interval of approximate width 0.05.\nRun the simulation with your chosen nn and report the resulting confidence interval.",
  "question_stem_html": "<div><p> </p>\n<p>It can be shown that if we add random numbers until their sum exceeds 1, then the expected number of random numbers added is equal to <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mi>e</mi><annotation encoding=\"application/x-tex\">e</annotation></semantics></math>. That is, if <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>N</mi><mo>=</mo><mo>min</mo><mrow><mo form=\"prefix\" stretchy=\"true\">{</mo><mi>n</mi><mo>:</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>U</mi><mi>i</mi></msub><mo>></mo><mn>1</mn><mo form=\"postfix\" stretchy=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\"> N = \\min \\left\\{ n: \\sum_{i=1}^n U_i > 1 \\right\\} </annotation></semantics></math> then <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mrow><mi>E</mi><mrow><mo form=\"prefix\" stretchy=\"true\">(</mo><mi>N</mi><mo form=\"postfix\" stretchy=\"true\">)</mo></mrow><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">E(N) = e</annotation></semantics></math>. (We do not need to prove the result for this question.)</p>\n<p>Suppose that a Monte Carlo simulation was run to estimate <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mi>e</mi><annotation encoding=\"application/x-tex\">e</annotation></semantics></math>, just like in the tutorial. From 1000 observations of <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><msub><mi>N</mi><mi>i</mi></msub><annotation encoding=\"application/x-tex\">N_i</annotation></semantics></math>, the variance <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mi>N</mi><annotation encoding=\"application/x-tex\">N</annotation></semantics></math> was estimated to be 0.76.</p>\n<p>Knowing that the formula for the 95% Confidence Interval is approximately <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mover><mi>N</mi><mo accent=\"true\">‾</mo></mover><mo>±</mo><mn>1.96</mn><mfrac><mi>s</mi><msqrt><mi>n</mi></msqrt></mfrac></mrow><annotation encoding=\"application/x-tex\"> \\bar{N} \\pm 1.96 \\frac{s}{\\sqrt{n}} </annotation></semantics></math> estimate the number of simulations needed to obtain an interval of approximate <strong>width</strong> 0.05.</p>\n<p>Run the simulation with your chosen <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mi>n</mi><annotation encoding=\"application/x-tex\">n</annotation></semantics></math> and report the resulting confidence interval.</p>\n<p><br><br><br></p></div>",
  "version": 1,
  "update_timestamp": "2025-09-17T22:44:01+08:00",
  "question_media": [],
  "items": [
    {
      "part_number": "a",
      "type": "essay",
      "subtype": "open-ended",
      "part_stem": "It can be shown that if we add random numbers until their sum exceeds 1, then the expected number of random numbers added is equal to ee. That is, if N=min{n:∑i=1nUi>1} N = \\min \\left\\{ n: \\sum_{i=1}^n U_i > 1 \\right\\}  then E(N)=eE(N) = e. (We do not need to prove the result for this question.)\nSuppose that a Monte Carlo simulation was run to estimate ee, just like in the tutorial. From 1000 observations of NiN_i, the variance NN was estimated to be 0.76.\nKnowing that the formula for the 95% Confidence Interval is approximately N‾±1.96sn \\bar{N} \\pm 1.96 \\frac{s}{\\sqrt{n}}  estimate the number of simulations needed to obtain an interval of approximate width 0.05.\nRun the simulation with your chosen nn and report the resulting confidence interval.",
      "part_stem_html": "<div><p> </p>\n<p>It can be shown that if we add random numbers until their sum exceeds 1, then the expected number of random numbers added is equal to <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mi>e</mi><annotation encoding=\"application/x-tex\">e</annotation></semantics></math>. That is, if <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>N</mi><mo>=</mo><mo>min</mo><mrow><mo form=\"prefix\" stretchy=\"true\">{</mo><mi>n</mi><mo>:</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>U</mi><mi>i</mi></msub><mo>></mo><mn>1</mn><mo form=\"postfix\" stretchy=\"true\">}</mo></mrow></mrow><annotation encoding=\"application/x-tex\"> N = \\min \\left\\{ n: \\sum_{i=1}^n U_i > 1 \\right\\} </annotation></semantics></math> then <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mrow><mi>E</mi><mrow><mo form=\"prefix\" stretchy=\"true\">(</mo><mi>N</mi><mo form=\"postfix\" stretchy=\"true\">)</mo></mrow><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">E(N) = e</annotation></semantics></math>. (We do not need to prove the result for this question.)</p>\n<p>Suppose that a Monte Carlo simulation was run to estimate <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mi>e</mi><annotation encoding=\"application/x-tex\">e</annotation></semantics></math>, just like in the tutorial. From 1000 observations of <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><msub><mi>N</mi><mi>i</mi></msub><annotation encoding=\"application/x-tex\">N_i</annotation></semantics></math>, the variance <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mi>N</mi><annotation encoding=\"application/x-tex\">N</annotation></semantics></math> was estimated to be 0.76.</p>\n<p>Knowing that the formula for the 95% Confidence Interval is approximately <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mover><mi>N</mi><mo accent=\"true\">‾</mo></mover><mo>±</mo><mn>1.96</mn><mfrac><mi>s</mi><msqrt><mi>n</mi></msqrt></mfrac></mrow><annotation encoding=\"application/x-tex\"> \\bar{N} \\pm 1.96 \\frac{s}{\\sqrt{n}} </annotation></semantics></math> estimate the number of simulations needed to obtain an interval of approximate <strong>width</strong> 0.05.</p>\n<p>Run the simulation with your chosen <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"inline\"><semantics><mi>n</mi><annotation encoding=\"application/x-tex\">n</annotation></semantics></math> and report the resulting confidence interval.</p>\n<p><br><br><br></p></div>",
      "choices": [
        {
          "choice_id": "Your answer",
          "text": "text_str",
          "text_html": "<p>text_str</p>",
          "is_correct": null,
          "explanation": null
        }
      ],
      "items_media": [],
      "scoring": {
        "points": 1.0
      },
      "feedback": {},
      "shuffle_choices": false,
      "solution": "Given that the variance is estimated to be 0.76, we can form the following equation: 2×1.96×0.76n=0.05n=2×1.96×0.760.05n≈4671\\begin{eqnarray*} 2 \\times 1.96 \\times \\frac{\\sqrt{0.76}}{\\sqrt{n}} &=& 0.05 \\\\ \\sqrt{n} &=& \\frac{2 \\times 1.96 \\times \\sqrt{0.76}}{0.05} \\\\ n &\\approx& 4671 \\end{eqnarray*}\nimport numpy as np\nfrom scipy.stats import uniform\nfrom scipy import stats\n\nrng = np.random.default_rng(2137)\n\ndef oneSampleN():\n    N = 0\n    sum = 0\n    while sum \n## Estimate: 2.709, CI: (2.685, 2.734)\n\nGiven that the variance is estimated to be 0.76, we can form the following equation: 2×1.96×0.76n=0.05n=2×1.96×0.760.05n≈4671\\begin{eqnarray*} 2 \\times 1.96 \\times \\frac{\\sqrt{0.76}}{\\sqrt{n}} &=& 0.05 \\\\ \\sqrt{n} &=& \\frac{2 \\times 1.96 \\times \\sqrt{0.76}}{0.05} \\\\ n &\\approx& 4671 \\end{eqnarray*}\nimport numpy as np\nfrom scipy.stats import uniform\nfrom scipy import stats\n\nrng = np.random.default_rng(2137)\n\ndef oneSampleN():\n    N = 0\n    sum = 0\n    while sum \n## Estimate: 2.709, CI: (2.685, 2.734)\n\nGiven that the variance is estimated to be 0.76, we can form the following\nequation:\n2×1.96×0.76n=0.05n=2×1.96×0.760.05n≈4671\\begin{eqnarray*}\n2 \\times 1.96 \\times \\frac{\\sqrt{0.76}}{\\sqrt{n}} &=& 0.05 \\\\\n\\sqrt{n} &=& \\frac{2 \\times 1.96 \\times \\sqrt{0.76}}{0.05} \\\\\nn &\\approx& 4671\n\\end{eqnarray*}\nimport numpy as np\nfrom scipy.stats import uniform\nfrom scipy import stats\n\nrng = np.random.default_rng(2137)\n\ndef oneSampleN():\n    N = 0\n    sum = 0\n    while sum \n## Estimate: 2.709, CI: (2.685, 2.734)",
      "solution_html": "<p>Given that the variance is estimated to be 0.76, we can form the following equation: <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable><mtr><mtd style=\"text-align: right;\" columnalign=\"right\"><mn>2</mn><mo>×</mo><mn>1.96</mn><mo>×</mo><mfrac><msqrt><mn>0.76</mn></msqrt><msqrt><mi>n</mi></msqrt></mfrac></mtd><mtd style=\"text-align: center;\" columnalign=\"center\"><mo>=</mo></mtd><mtd style=\"text-align: left;\" columnalign=\"left\"><mn>0.05</mn></mtd></mtr><mtr><mtd style=\"text-align: right;\" columnalign=\"right\"><msqrt><mi>n</mi></msqrt></mtd><mtd style=\"text-align: center;\" columnalign=\"center\"><mo>=</mo></mtd><mtd style=\"text-align: left;\" columnalign=\"left\"><mfrac><mrow><mn>2</mn><mo>×</mo><mn>1.96</mn><mo>×</mo><msqrt><mn>0.76</mn></msqrt></mrow><mn>0.05</mn></mfrac></mtd></mtr><mtr><mtd style=\"text-align: right;\" columnalign=\"right\"><mi>n</mi></mtd><mtd style=\"text-align: center;\" columnalign=\"center\"><mo>≈</mo></mtd><mtd style=\"text-align: left;\" columnalign=\"left\"><mn>4671</mn></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{eqnarray*} 2 \\times 1.96 \\times \\frac{\\sqrt{0.76}}{\\sqrt{n}} &=& 0.05 \\\\ \\sqrt{n} &=& \\frac{2 \\times 1.96 \\times \\sqrt{0.76}}{0.05} \\\\ n &\\approx& 4671 \\end{eqnarray*}</annotation></semantics></math></p>\n<pre><code>import numpy as np\nfrom scipy.stats import uniform\nfrom scipy import stats\n\nrng = np.random.default_rng(2137)\n\ndef oneSampleN():\n    N = 0\n    sum = 0\n    while sum <= 1:\n        N += 1\n        sum += uniform.rvs(0, 1, size=1, random_state=rng)\n    \n    return N\n\nnsim = 4672\nN_sample = np.array([oneSampleN() for i in range(nsim)])\ne_estimate = np.mean(N_sample)\ns_estimate = np.std(N_sample)\nlower_ci = e_estimate - stats.norm.ppf(0.975)*s_estimate/np.sqrt(nsim)\nupper_ci = e_estimate + stats.norm.ppf(0.975)*s_estimate/np.sqrt(nsim)\nprint(f\"Estimate: {e_estimate:.3f}, CI: ({lower_ci:.3f}, {upper_ci:.3f})\")</code></pre>\n<pre><code>## Estimate: 2.709, CI: (2.685, 2.734)</code></pre>\n\n<p>Given that the variance is estimated to be 0.76, we can form the following equation: <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable><mtr><mtd style=\"text-align: right;\" columnalign=\"right\"><mn>2</mn><mo>×</mo><mn>1.96</mn><mo>×</mo><mfrac><msqrt><mn>0.76</mn></msqrt><msqrt><mi>n</mi></msqrt></mfrac></mtd><mtd style=\"text-align: center;\" columnalign=\"center\"><mo>=</mo></mtd><mtd style=\"text-align: left;\" columnalign=\"left\"><mn>0.05</mn></mtd></mtr><mtr><mtd style=\"text-align: right;\" columnalign=\"right\"><msqrt><mi>n</mi></msqrt></mtd><mtd style=\"text-align: center;\" columnalign=\"center\"><mo>=</mo></mtd><mtd style=\"text-align: left;\" columnalign=\"left\"><mfrac><mrow><mn>2</mn><mo>×</mo><mn>1.96</mn><mo>×</mo><msqrt><mn>0.76</mn></msqrt></mrow><mn>0.05</mn></mfrac></mtd></mtr><mtr><mtd style=\"text-align: right;\" columnalign=\"right\"><mi>n</mi></mtd><mtd style=\"text-align: center;\" columnalign=\"center\"><mo>≈</mo></mtd><mtd style=\"text-align: left;\" columnalign=\"left\"><mn>4671</mn></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{eqnarray*} 2 \\times 1.96 \\times \\frac{\\sqrt{0.76}}{\\sqrt{n}} &=& 0.05 \\\\ \\sqrt{n} &=& \\frac{2 \\times 1.96 \\times \\sqrt{0.76}}{0.05} \\\\ n &\\approx& 4671 \\end{eqnarray*}</annotation></semantics></math></p>\n<pre><code>import numpy as np\nfrom scipy.stats import uniform\nfrom scipy import stats\n\nrng = np.random.default_rng(2137)\n\ndef oneSampleN():\n    N = 0\n    sum = 0\n    while sum <= 1:\n        N += 1\n        sum += uniform.rvs(0, 1, size=1, random_state=rng)\n    \n    return N\n\nnsim = 4672\nN_sample = np.array([oneSampleN() for i in range(nsim)])\ne_estimate = np.mean(N_sample)\ns_estimate = np.std(N_sample)\nlower_ci = e_estimate - stats.norm.ppf(0.975)*s_estimate/np.sqrt(nsim)\nupper_ci = e_estimate + stats.norm.ppf(0.975)*s_estimate/np.sqrt(nsim)\nprint(f\"Estimate: {e_estimate:.3f}, CI: ({lower_ci:.3f}, {upper_ci:.3f})\")</code></pre>\n<pre><code>## Estimate: 2.709, CI: (2.685, 2.734)</code></pre>\n\n<p>Given that the variance is estimated to be 0.76, we can form the following\nequation:\n<math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mtable><mtr><mtd columnalign=\"right\" style=\"text-align: right\"><mn>2</mn><mo>×</mo><mn>1.96</mn><mo>×</mo><mfrac><msqrt><mn>0.76</mn></msqrt><msqrt><mi>n</mi></msqrt></mfrac></mtd><mtd columnalign=\"center\" style=\"text-align: center\"><mo>=</mo></mtd><mtd columnalign=\"left\" style=\"text-align: left\"><mn>0.05</mn></mtd></mtr><mtr><mtd columnalign=\"right\" style=\"text-align: right\"><msqrt><mi>n</mi></msqrt></mtd><mtd columnalign=\"center\" style=\"text-align: center\"><mo>=</mo></mtd><mtd columnalign=\"left\" style=\"text-align: left\"><mfrac><mrow><mn>2</mn><mo>×</mo><mn>1.96</mn><mo>×</mo><msqrt><mn>0.76</mn></msqrt></mrow><mn>0.05</mn></mfrac></mtd></mtr><mtr><mtd columnalign=\"right\" style=\"text-align: right\"><mi>n</mi></mtd><mtd columnalign=\"center\" style=\"text-align: center\"><mo>≈</mo></mtd><mtd columnalign=\"left\" style=\"text-align: left\"><mn>4671</mn></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{eqnarray*}\n2 \\times 1.96 \\times \\frac{\\sqrt{0.76}}{\\sqrt{n}} &=& 0.05 \\\\\n\\sqrt{n} &=& \\frac{2 \\times 1.96 \\times \\sqrt{0.76}}{0.05} \\\\\nn &\\approx& 4671\n\\end{eqnarray*}</annotation></semantics></math></p>\n<pre><code>import numpy as np\nfrom scipy.stats import uniform\nfrom scipy import stats\n\nrng = np.random.default_rng(2137)\n\ndef oneSampleN():\n    N = 0\n    sum = 0\n    while sum <= 1:\n        N += 1\n        sum += uniform.rvs(0, 1, size=1, random_state=rng)\n    \n    return N\n\nnsim = 4672\nN_sample = np.array([oneSampleN() for i in range(nsim)])\ne_estimate = np.mean(N_sample)\ns_estimate = np.std(N_sample)\nlower_ci = e_estimate - stats.norm.ppf(0.975)*s_estimate/np.sqrt(nsim)\nupper_ci = e_estimate + stats.norm.ppf(0.975)*s_estimate/np.sqrt(nsim)\nprint(f\"Estimate: {e_estimate:.3f}, CI: ({lower_ci:.3f}, {upper_ci:.3f})\")</code></pre>\n<pre><code>## Estimate: 2.709, CI: (2.685, 2.734)</code></pre>",
      "difficulty_level": 1.0,
      "concept_tags": [
        "probability"
      ]
    }
  ]
}